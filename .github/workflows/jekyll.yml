name: Deploy Jekyll site to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Verify source assets
        run: |
          echo "Verifying source assets..."
          
          # Define required files
          required_files=(
            "assets/css/basecamp.css"
            "assets/css/theme.css"
            "assets/js/navigation.js"
            "assets/js/scrolltext.js"
            "assets/images/headshot.png"
          )
          
          # Check each required file
          missing_files=()
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✓ Found source file: $file"
            else
              echo "✗ Missing source file: $file"
              missing_files+=("$file")
            fi
          done
          
          # Fail if any files are missing
          if [ ${#missing_files[@]} -ne 0 ]; then
            echo "Error: Missing required source files:"
            printf '%s\n' "${missing_files[@]}"
            exit 1
          fi
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      
      - name: Install Dependencies
        run: |
          bundle config set --local path 'vendor/bundle'
          bundle install
          
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
      
      - name: Prepare directories and files
        run: |
          # Create root .nojekyll
          touch .nojekyll
          
          # Create _site directory and its subdirectories
          mkdir -p _site/assets/{css,js,images,fonts}
          
          # Create _site .nojekyll
          touch _site/.nojekyll
          
          # Debug output
          echo "Created directories:"
          ls -la _site/assets/
          
      - name: Copy assets to _site
        run: |
          echo "Copying assets to _site..."
          cp -rv assets/css/* _site/assets/css/ || echo "No CSS files to copy"
          cp -rv assets/js/* _site/assets/js/ || echo "No JS files to copy"
          cp -rv assets/images/* _site/assets/images/ || echo "No image files to copy"
          cp -rv assets/fonts/* _site/assets/fonts/ || echo "No font files to copy"
          
          echo "Contents of _site/assets after copy:"
          ls -R _site/assets/
          
      - name: Build with Jekyll
        run: |
          JEKYLL_ENV=production bundle exec jekyll build --trace --verbose
        env:
          JEKYLL_ENV: production
      
      - name: Verify built assets
        run: |
          echo "Verifying built assets..."
          
          # Define required files in _site
          required_files=(
            "_site/assets/css/basecamp.css"
            "_site/assets/css/theme.css"
            "_site/assets/js/navigation.js"
            "_site/assets/js/scrolltext.js"
            "_site/assets/images/headshot.png"
          )
          
          # Check each required file
          missing_files=()
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✓ Found built file: $file"
              echo "File size: $(ls -lh $file | awk '{print $5}')"
              echo "File permissions: $(ls -l $file | awk '{print $1}')"
            else
              echo "✗ Missing built file: $file"
              missing_files+=("$file")
            fi
          done
          
          # Show directory structure
          echo -e "\nFinal _site directory structure:"
          ls -R _site/
          
          # Fail if any files are missing
          if [ ${#missing_files[@]} -ne 0 ]; then
            echo "Error: Missing required built files:"
            printf '%s\n' "${missing_files[@]}"
            exit 1
          fi
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 